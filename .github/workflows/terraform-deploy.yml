name: OpenTofu Infra and Deploy App

on:
  push:
    branches:
      - main

jobs:
  # Paso 1: Crear la infraestructura con OpenTofu
  create-infra:
    name: Create Infrastructure
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Install OpenTofu
        run: |
          curl -L https://github.com/opentofu/opentofu/releases/download/opentofu_$(uname -s | tr '[:upper:]' '[:lower:]')_amd64.tar.gz -o opentofu.tar.gz || { echo "Failed to download OpenTofu"; exit 1; }
          tar -xzf opentofu.tar.gz -C /usr/local/bin || { echo "Failed to extract OpenTofu"; exit 1; }
          chmod +x /usr/local/bin/opentofu
          opentofu version

      - name: Initialize OpenTofu
        id: init
        run: tofu init -backend-config="bucket=${{ secrets.OT_STATE_BUCKET }}" -backend-config="key=react-app/tofu.tfstate" -backend-config="region=${{ vars.AWS_REGION }}"
        working-directory: opentofu

      - name: Plan OpenTofu
        id: plan
        run: tofu plan -no-color
        working-directory: opentofu

      - name: Apply OpenTofu
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.plan.conclusion == 'success'
        run: tofu apply -auto-approve -no-color
        working-directory: opentofu

  # Paso 2: Desplegar la aplicaciÃ³n
  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: create-infra # Este trabajo depende de que se complete "create-infra"
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-ids: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Create Task Definition
        run: |
            echo '{
            "family": "demoflisol2025-dev-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
              "memory": "512",
              "executionRoleArn": "arn:aws:iam::485477314826:role/demoflisol2025-dev-task-execution-role",
              "containerDefinitions": [
                {
                  "name": "web",
                  "image": "${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:${{ github.sha }}",
                  "portMappings": [
                    {
                      "containerPort": 80,
                      "hostPort": 80,
                      "protocol": "tcp"
                    }
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "/ecs/demoflisol2025-dev-task",
                      "awslogs-region": "us-east-1",
                      "awslogs-stream-prefix": "web"
                    }
                  }
                }
              ]
            }' > opentofu/modules/ecs/task-definition.json

      - name: Render ECS Task Definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: opentofu/modules/ecs/task-definition.json
          container-name: web
          image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY_NAME }}:latest
      
      - name: Register ECS Task Definition
        id: register-task
        run: |
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://opentofu/modules/ecs/task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
        
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER_NAME }} \
            --service ${{ vars.ECS_SERVICE_NAME }} \
            --task-definition ${{ env.TASK_DEFINITION_ARN }} \
            --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}